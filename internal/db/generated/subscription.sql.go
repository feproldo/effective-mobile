// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: subscription.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createSubscription = `-- name: CreateSubscription :exec
INSERT INTO subscription (service_name, price, user_id, start_date, end_date) VALUES ($1, $2, $3, $4, $5)
`

type CreateSubscriptionParams struct {
	ServiceName string       `json:"service_name"`
	Price       int32        `json:"price"`
	UserID      uuid.UUID    `json:"user_id"`
	StartDate   time.Time    `json:"start_date"`
	EndDate     sql.NullTime `json:"end_date"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, createSubscription,
		arg.ServiceName,
		arg.Price,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
	)
	return err
}

const subscriptionsList = `-- name: SubscriptionsList :many
SELECT service_name, price, user_id, start_date, end_date FROM subscription
`

func (q *Queries) SubscriptionsList(ctx context.Context) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, subscriptionsList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ServiceName,
			&i.Price,
			&i.UserID,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
